#!/usr/bin/env python3
#
# This file is part of powerd.
#
# powerd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# powerd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with powerd.  If not, see <http://www.gnu.org/licenses/>.

# pylint: disable=broad-except
# pylint: disable=too-few-public-methods

"""Frontend for interacting with the PDUs and UPSes via SNMP."""

import datetime
import json
import threading
import Pyro4

PYRO_HOST = '192.168.0.102'
PYRO_PORT = 9016
PYRO_NAME = 'observatory_log_daemon'

class ObservatoryLogDaemon:
    """Wraps the observatory log database"""
    def __init__(self):
        # TODO: For now we'll just use a json file...
        # This is horrible for the long term, but should hold us over until we
        # set up a proper database server
        self._db_file = '/var/tmp/log.json'
        self._database_lock = threading.Lock()
        try:
            with open(self._db_file, 'r') as infile:
                self._database = json.load(infile)
        except Exception:
            self._database = []

    def __save(self):
        """Saves the log to disk"""
        with open(self._db_file, 'w') as outfile:
            json.dump(self._database, outfile)

    def __log(self, table, message_type, message):
        """Logs a message of a given type"""
        with self._database_lock:
            self._database.append({
                'table': table,
                'type': message_type,
                'date': datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%S.%f'),
                'message': message
            })
            self.__save()

    @Pyro4.expose
    def log_info(self, table, message):
        """Logs an info message"""
        self.__log(table, 'info', message)

    @Pyro4.expose
    def log_warning(self, table, message):
        """Logs a warning message"""
        self.__log(table, 'warning', message)

    @Pyro4.expose
    def log_error(self, table, message):
        """Logs an error message"""
        self.__log(table, 'error', message)

    @Pyro4.expose
    def messages(self, date_string):
        """Returns messages newer than <date_string>
           Format should be YYYY-MM-DDTHH:MM:SSZ"""
        with self._database_lock:
            return list(filter(lambda e: e['date'] > date_string, self._database))

def spawn_daemon():
    """Spawns the daemon and registers it with Pyro"""
    Pyro4.config.COMMTIMEOUT = 5
    Pyro4.config.REQUIRE_EXPOSE = True

    pyro = Pyro4.Daemon(host=PYRO_HOST, port=PYRO_PORT)
    power = ObservatoryLogDaemon()
    uri = pyro.register(power, objectId=PYRO_NAME)

    print('Starting observatory log daemon with Pyro ID:', uri)
    pyro.requestLoop()
    print('Stopping observatory log daemon with Pyro ID:', uri)

if __name__ == '__main__':
    spawn_daemon()
