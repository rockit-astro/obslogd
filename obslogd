#!/usr/bin/env python3
#
# This file is part of the Robotic Observatory Control Kit (rockit)
#
# rockit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# rockit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rockit.  If not, see <http://www.gnu.org/licenses/>.

"""Frontend to the log database."""

import argparse
import datetime
import json
import pymysql
import Pyro4
from rockit.common import daemons, validation


CONFIG_SCHEMA = {
    'type': 'object',
    'additionalProperties': False,
    'required': ['daemon', 'database_db', 'database_user'],
    'properties': {
        'daemon': {
            'type': 'string',
            'daemon_name': True
        },
        'database_db': {
            'type': 'string'
        },
        'database_user': {
            'type': 'string'
        }
    }
}


class Config:
    """Daemon configuration parsed from a json file"""
    def __init__(self, config_filename):
        # Will throw on file not found or invalid json
        with open(config_filename, 'r', encoding='utf-8') as config_file:
            config_json = json.load(config_file)

        # Will throw on schema violations
        validation.validate_config(config_json, CONFIG_SCHEMA, {
            'daemon_name': validation.daemon_name_validator
        })

        self.daemon = getattr(daemons, config_json['daemon'])
        self.database_db = config_json['database_db']
        self.database_user = config_json['database_user']


class ObservatoryLogDaemon:
    """Wraps the observatory log database"""
    def __init__(self, config):
        self._config = config

    def __log(self, source, message_type, message):
        """Logs a message of a given type"""
        try:
            db = pymysql.connect(
                db=self._config.database_db,
                user=self._config.database_user,
                autocommit=True)

            with db.cursor() as cur:
                cur.execute(
                    'INSERT INTO obslog (type, source, message) VALUES (%s, %s, %s);',
                    (message_type, source, message))
        except Exception as e:
            print('failed to insert message with error: ' + str(e))

    @Pyro4.expose
    def log_info(self, source, message):
        """Logs an info message"""
        self.__log(source, 'info', message)

    @Pyro4.expose
    def log_warning(self, source, message):
        """Logs a warning message"""
        self.__log(source, 'warning', message)

    @Pyro4.expose
    def log_error(self, source, message):
        """Logs an error message"""
        self.__log(source, 'error', message)

    @Pyro4.expose
    def messages(self, start_time):
        """Query the database for messages newer than <start_time>.
           Returns a tuple of (id, date, type, source, message)"""
        try:
            datetime.datetime.strptime(start_time, '%Y-%m-%dT%H:%M:%S')
        except ValueError as e:
            raise ValueError("from_date must be YYYY-MM-DDTHH:MM:SS") from e

        db = pymysql.connect(
            db=self._config.database_db,
            user=self._config.database_user)

        with db.cursor() as cur:
            cur.execute('SELECT id, date, type, source, message from obslog WHERE date > %s;', (start_time,))
            return list(cur)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Environment Server')
    parser.add_argument('config', help='Path to configuration json file')
    args = parser.parse_args()
    c = Config(args.config)
    c.daemon.launch(ObservatoryLogDaemon(c))
