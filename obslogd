#!/usr/bin/env python3
#
# This file is part of powerd.
#
# powerd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# powerd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with powerd.  If not, see <http://www.gnu.org/licenses/>.

# pylint: disable=broad-except
# pylint: disable=too-few-public-methods
# pylint: disable=invalid-name
# pylint: disable=no-self-use

"""Frontend to the log database."""

import datetime
import pymysql
import Pyro4
import warwick.observatory as observatory

DATABASE_DB = 'ops'
DATABASE_USER = 'ops'

class ObservatoryLogDaemon:
    """Wraps the observatory log database"""

    def __log(self, source, message_type, message):
        """Logs a message of a given type"""
        try:
            db = pymysql.connect(db=DATABASE_DB, user=DATABASE_USER, autocommit=True)
            with db.cursor() as cur:
                cur.execute('INSERT INTO obslog (type, source, message) VALUES (' \
                    + db.escape(message_type) + ', ' + db.escape(source) + ', ' \
                    + db.escape(message) + ');')
        except Exception as e:
            print('failed to insert message with error: ' + str(e))

    @Pyro4.expose
    def log_info(self, source, message):
        """Logs an info message"""
        self.__log(source, 'info', message)

    @Pyro4.expose
    def log_warning(self, source, message):
        """Logs a warning message"""
        self.__log(source, 'warning', message)

    @Pyro4.expose
    def log_error(self, source, message):
        """Logs an error message"""
        self.__log(source, 'error', message)

    @Pyro4.expose
    def messages(self, start_time):
        """Query the database for messages newer than <start_time>.
           Returns a tuple of (id, date, type, source, message)"""
        try:
            datetime.datetime.strptime(start_time, '%Y-%m-%dT%H:%M:%S')
        except ValueError:
            raise ValueError("from_date must be YYYY-MM-DDTHH:MM:SS")

        db = pymysql.connect(db=DATABASE_DB, user=DATABASE_USER)
        with db.cursor() as cur:
            cur.execute('SELECT id, date, type, source, message from obslog WHERE date > ' \
                + db.escape(start_time) + ';')
            return list(cur)

if __name__ == '__main__':
    observatory.daemons.observatory_log.launch(ObservatoryLogDaemon())
